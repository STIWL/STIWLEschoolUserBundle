<?php

namespace Esolving\Eschool\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    public function findOneByEmailExceptSelf($email, $userId) {
        $qb = $this->createQueryBuilder('user');
        $qb->addSelect()
                ->where('user.email = :email')
                ->andWhere('user.id != :userId')
                ->setParameters(array(
                    'email' => $email,
                    'userId' => $userId
                ))
        ;
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    public function findOneByUserIdByLanguage($userId, $language) {
        $qb = $this->createQueryBuilder('user');
        $qb->addSelect('distritType', 'distritType_languages', 'groupBlodType', 'groupBlodType_languages', 'headquarterType', 'headquarterType_languages', 'sectionType', 'sectionType_languages', 'sexType', 'sexType_languages', 'rolesAccess', 'rolesAccess_roleType', 'rolesAccess_roleType_languages')
                ->join('user.distritType', 'distritType')
                ->join('distritType.languages', 'distritType_languages')
                ->join('user.groupBlodType', 'groupBlodType')
                ->join('groupBlodType.languages', 'groupBlodType_languages')
                ->join('user.headquarterType', 'headquarterType')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->join('user.sectionType', 'sectionType')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('user.sexType', 'sexType')
                ->join('sexType.languages', 'sexType_languages')
                ->join('user.rolesAccess', 'rolesAccess')
                ->join('rolesAccess.roleType', 'rolesAccess_roleType')
                ->join('rolesAccess_roleType.languages', 'rolesAccess_roleType_languages')
                ->where($qb->expr()->eq('distritType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('groupBlodType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sexType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('rolesAccess_roleType_languages.language', $qb->expr()->literal($language)))
                ->andWhere('user.id = :userId')
                ->setParameter('userId', $userId);

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        return $result;
    }

    public function findAllByLanguageToSonataAdmin($language, $query) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query->addSelect('rolesAcccess', 'rolesAcccess_roleType', 'rolesAcccess_roleType_languages', 'sexType', 'sexType_languages', 'distritType', 'distritType_languages', 'groupBlodType', 'groupBlodType_languages', 'sectionType', 'sectionType_languages', 'headquarterType', 'headquarterType_languages')
                ->join('o.rolesAccess', 'rolesAcccess')
                ->join('rolesAcccess.roleType', 'rolesAcccess_roleType')
                ->join('rolesAcccess_roleType.languages', 'rolesAcccess_roleType_languages')
                ->join('o.sexType', 'sexType')
                ->join('sexType.languages', 'sexType_languages')
                ->join('o.distritType', 'distritType')
                ->join('distritType.languages', 'distritType_languages')
                ->join('o.groupBlodType', 'groupBlodType')
                ->join('groupBlodType.languages', 'groupBlodType_languages')
                ->join('o.sectionType', 'sectionType')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('o.headquarterType', 'headquarterType')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->where($qb->expr()->eq('rolesAcccess_roleType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sexType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('distritType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('groupBlodType_languages.language', $qb->expr()->literal($language)))
                ->orderBy('o.lastName')
        ;
        return $query;
    }

    public function findAllExceptAdminBySectionIdByHeadquarterIdByLanguage($sectionId, $headquarterId, $language) {
        $qb = $this->createQueryBuilder('user');
        $qb->addSelect('distritType', 'distritType_languages', 'groupBlodType', 'groupBlodType_languages', 'headquarterType', 'headquarterType_languages', 'sectionType', 'sectionType_languages', 'sexType', 'sexType_languages', 'rolesAccess', 'rolesAccess_roleType', 'rolesAccess_roleType_languages')
                ->join('user.distritType', 'distritType')
                ->join('distritType.languages', 'distritType_languages')
                ->join('user.groupBlodType', 'groupBlodType')
                ->join('groupBlodType.languages', 'groupBlodType_languages')
                ->join('user.headquarterType', 'headquarterType')
                ->join('headquarterType.languages', 'headquarterType_languages')
                ->join('user.sectionType', 'sectionType')
                ->join('sectionType.languages', 'sectionType_languages')
                ->join('user.sexType', 'sexType')
                ->join('sexType.languages', 'sexType_languages')
                ->join('user.rolesAccess', 'rolesAccess')
                ->join('rolesAccess.roleType', 'rolesAccess_roleType')
                ->join('rolesAccess_roleType.languages', 'rolesAccess_roleType_languages')
                ->where($qb->expr()->eq('distritType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('groupBlodType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->neq('rolesAccess_roleType.name', $qb->expr()->literal('ROLE_ADMIN')))
                ->andWhere($qb->expr()->eq('headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('sexType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('rolesAccess_roleType_languages.language', $qb->expr()->literal($language)))
                ->andWhere('sectionType.id = :sectionId')
                ->andWhere('headquarterType.id = :headquarterId')
                ->setParameter('sectionId', $sectionId)
                ->setParameter('headquarterId', $headquarterId);

        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

    public function loadUserByUsername($codeOrEmail) {
        $q = $this
                ->createQueryBuilder('user')
                ->addSelect('roles', 'roleType')
                ->join('user.rolesAccess', 'roles')
                ->join('roles.roleType', 'roleType')
                ->where('user.code = :code')
                ->andWhere('user.status = 1')
                ->setParameter('code', $codeOrEmail)
                ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin EsolvingEschoolUseBundle:User object identified by "%s".', $codeOrEmail), null, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

}