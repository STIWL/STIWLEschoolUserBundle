<?php

namespace Esolving\Eschool\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * StudentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentRepository extends EntityRepository {

    public function findAllBySectionIdByHeadquarterIdByLanguage($sectionId, $headquarterId, $language) {
        $qb = $this->createQueryBuilder('student');
        $qb->addSelect('user', 'user_distritType', 'user_distritType_languages', 'user_groupBlodType', 'user_groupBlodType_languages', 'user_headquarterType', 'user_headquarterType_languages', 'user_sectionType', 'user_sectionType_languages', 'user_sexType', 'user_sexType_languages', 'user_rolesAccess', 'user_rolesAccess_roleType', 'user_rolesAccess_roleType_languages')
                ->join('student.user', 'user')
                ->join('user.distritType', 'user_distritType')
                ->join('user_distritType.languages', 'user_distritType_languages')
                ->join('user.groupBlodType', 'user_groupBlodType')
                ->join('user_groupBlodType.languages', 'user_groupBlodType_languages')
                ->join('user.headquarterType', 'user_headquarterType')
                ->join('user_headquarterType.languages', 'user_headquarterType_languages')
                ->join('user.sectionType', 'user_sectionType')
                ->join('user_sectionType.languages', 'user_sectionType_languages')
                ->join('user.sexType', 'user_sexType')
                ->join('user_sexType.languages', 'user_sexType_languages')
                ->join('user.rolesAccess', 'user_rolesAccess')
                ->join('user_rolesAccess.roleType', 'user_rolesAccess_roleType')
                ->join('user_rolesAccess_roleType.languages', 'user_rolesAccess_roleType_languages')
                ->where($qb->expr()->eq('user_distritType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_groupBlodType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_sexType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_rolesAccess_roleType_languages.language', $qb->expr()->literal($language)))
                ->andWhere('user_sectionType.id = :sectionId')
                ->andWhere('user_headquarterType.id = :headquarterId')
                ->setParameter('sectionId', $sectionId)
                ->setParameter('headquarterId', $headquarterId);

        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

    public function findOneByStudentIdByLanguage($studentId, $language) {
        $qb = $this->createQueryBuilder('student');
        $qb->addSelect('user', 'user_distritType', 'user_distritType_languages', 'user_groupBlodType', 'user_groupBlodType_languages', 'user_headquarterType', 'user_headquarterType_languages', 'user_sectionType', 'user_sectionType_languages', 'user_sexType', 'user_sexType_languages', 'user_rolesAccess', 'user_rolesAccess_roleType', 'user_rolesAccess_roleType_languages')
                ->join('student.user', 'user')
                ->join('user.distritType', 'user_distritType')
                ->join('user_distritType.languages', 'user_distritType_languages')
                ->join('user.groupBlodType', 'user_groupBlodType')
                ->join('user_groupBlodType.languages', 'user_groupBlodType_languages')
                ->join('user.headquarterType', 'user_headquarterType')
                ->join('user_headquarterType.languages', 'user_headquarterType_languages')
                ->join('user.sectionType', 'user_sectionType')
                ->join('user_sectionType.languages', 'user_sectionType_languages')
                ->join('user.sexType', 'user_sexType')
                ->join('user_sexType.languages', 'user_sexType_languages')
                ->join('user.rolesAccess', 'user_rolesAccess')
                ->join('user_rolesAccess.roleType', 'user_rolesAccess_roleType')
                ->join('user_rolesAccess_roleType.languages', 'user_rolesAccess_roleType_languages')
                ->where($qb->expr()->eq('user_distritType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_groupBlodType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_headquarterType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_sectionType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_sexType_languages.language', $qb->expr()->literal($language)))
                ->andWhere($qb->expr()->eq('user_rolesAccess_roleType_languages.language', $qb->expr()->literal($language)))
                ->andWhere('student.id = :studentId')
                ->setParameter('studentId', $studentId);

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        return $result;
    }

    public function findAllNoInscribe($studentId = null) {

        $qb = $this->createQueryBuilder('student');
        $subQueryStudentInscribe = "SELECT studentInscribe_student.id FROM EsolvingEschoolRoomBundle:StudentInscribe studentInscribe JOIN studentInscribe.student studentInscribe_student where studentInscribe.inscribedYearAt = :thisYear";
        $qb->setParameter('thisYear', date('Y'));

        if ($studentId) {
            $subQueryStudentInscribe = $subQueryStudentInscribe . ' and studentInscribe_student.id != :studentId';
            $qb->setParameter('studentId', $studentId);
        }

        $qb->where("student.id NOT IN ( $subQueryStudentInscribe )");
        $query = $qb->getQuery();
        return $query->getResult();
    }
}
